<#@ template language="C#" debug="true" hostSpecific="true"  #>
<#@ output extension="log" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Threading" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="FontAwesome.WPF.Generate" #>
<#@ import namespace="System.Diagnostics" #>
<#@ include file="Utils.tt" #>
<#
	Directory.SetCurrentDirectory(Path.GetDirectoryName(Host.TemplateFile));

	var folderProject = Directory.GetCurrentDirectory();
	var folderSolution = Directory.GetParent(folderProject).FullName;
	var folderRepo = Directory.GetParent(folderSolution).FullName;
	var configFile = Path.Combine(folderRepo, @"Font-Awesome\_config.yml");
	var svgFile = Path.Combine(folderRepo, @"Font-Awesome\fonts\fontawesome-webfont.svg");
	var outputFile = Path.Combine(folderSolution, @"FontAwesome.WPF\FontAwesomeControls.cs");
	var interop = new FontAwesomeInterop(configFile);
	var svg = new FontAwesomeSvg(svgFile);
    
	var baseUrl = String.Format("{0}/{1}/{{0}}/", interop.Config.Url, interop.Container.IconDestination);
	
	WriteAutoGenerated();

	WriteLine("namespace FontAwesome.WPF {");
	PushIndent("\t");
	WriteLine("using System.Windows.Media;");

	foreach(var item in interop.Items) {
		WriteLine("///<summary>");
		WriteLine("///	{0} (created: {1})", item.Name, item.Created);
		WriteLine("///	FontAwesome {0} by {1} (@{2})", interop.Config.DocBlob, interop.Config.Author.Name, interop.Config.Author.Github);
		WriteLine("///	{0}", interop.Config.Tagline);
		WriteLine("///	License http://fontawesome.io/license (Font: {0}, C#: MIT License)", interop.Config.DocBlob, interop.Config.Tagline);
		WriteLine("///</summary>");	
		WriteLine("///<see cref=\"{0}\" />", String.Format(baseUrl, item.Id));
		WriteLine("///<seealso cref=\"https://github.com/charri/Font-Awesome-WPF\" />");
		if(item.Categories != null && item.Categories.Count > 0) {
            var sb = new StringBuilder();
			foreach(var cat in item.Categories) {
                sb.AppendFormat("IconCategory(\"{0}\"),", cat);
			}
		    sb.Remove(sb.Length - 1, 1);
            WriteLine("[{0}]", sb.ToString());
		}
		WriteLine("public class {0} : FontAwesomeControl {{ ", item.SafeName);
		PushIndent("\t");
		WriteLine("private static readonly Geometry Source = Geometry.Parse(\"{0}\");", svg.PathData(item.Unicode));
		WriteLine("/// <summary>Creates a new {0}</summary>", item.SafeName);
		WriteLine("public {0}() {{", item.SafeName);
		PushIndent("\t");
		WriteLine("SetValue(DataProperty, Source);");
		PopIndent();
		WriteLine("}");
			PopIndent();
		WriteLine("}");

		if(item.Aliases != null) {
			foreach(var alias in item.Aliases) {
				var safeAlias = item.Safe(alias);
				if(String.Equals(safeAlias, item.SafeName, StringComparison.InvariantCultureIgnoreCase)) continue;
				WriteLine("///<summary>Alias of: {0}</summary>", item.SafeName);
				WriteLine("///<see cref=\"F:FontAwesome.WPF.{0}\" />", item.SafeName);
				WriteLine("[IconAlias]");
				WriteLine("public class {0} : {1} {{ ", safeAlias, item.SafeName);
				WriteLine("}");
			}
		}
	}
	/*PopIndent();
	WriteLine("}");*/
	PopIndent();
	WriteLine("}");

	SaveOutput(outputFile);

#>