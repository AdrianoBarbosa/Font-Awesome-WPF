<#@ template language="C#" debug="true" hostSpecific="true" #>
<#@ output extension=".log" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Threading" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>

<#
	Directory.SetCurrentDirectory(Path.GetDirectoryName(Host.TemplateFile));

	CultureInfo cultureInfo   = Thread.CurrentThread.CurrentCulture;
	TextInfo textInfo = cultureInfo.TextInfo;

	Regex rgx = new Regex(@"\([^)]*\)");

	using (StreamReader sr = new StreamReader(@"$(SolutionDir)\..\..\..\Font-Awesome\src\icons.yml")) {
		string line;

		var output = new System.IO.StreamWriter(@"FontAwesomeIcon.cs");

		output.WriteLine("namespace Font_Awesome.WPF {");
		output.WriteLine("\tusing System.ComponentModel;");
		output.WriteLine("\tpublic enum FontAwesomeIcon {");
		output.WriteLine("\t\tNone = 0x0,");

		string prop = string.Empty, code = string.Empty, description = string.Empty;

		while((line = sr.ReadLine()) != null) {

			if(line.Contains("- name:")) {
				
				description = line.Replace("- name:", String.Empty).Trim(); 
				prop = textInfo.ToTitleCase(description.Replace("-", " "));
				prop = prop.Replace(" ", String.Empty).Replace(".", String.Empty);
				prop = rgx.Replace(prop, String.Empty);
				
			} else if(line.Contains("unicode:")) {
				code = line.Replace("    unicode:", String.Empty).Trim();
				
			} else if(line.Contains("categories:")) {
				
				output.WriteLine(String.Format("\t\t[Description(\"{0}\")]", description));

				while((line = sr.ReadLine()) != null && !line.Contains(":") && !string.IsNullOrEmpty(line.Trim())) {
					output.WriteLine(String.Format("\t\t[IconCategory(\"{0}\")]", line.Replace("-", String.Empty).Trim()));
				}

				output.WriteLine(String.Format("\t\t{0} = 0x{1},", prop, code));

				output.Flush();
			}
		}

		output.WriteLine("\t}");
		output.WriteLine("}");
		output.Flush();
		output.Close();
	}

#>